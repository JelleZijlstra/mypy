from typing import Any, Callable, Generic, TypeVar

_CT = TypeVar('_CT', bound=Callable[..., Any])
_T = TypeVar('_T')

class AsyncTask(Generic[_T]):
    def value(self) -> _T: ...

class AsyncDecorator(Generic[_T]):
    def is_pure_async_fn(self) -> bool: ...
    def asynq(self, *args: Any, **kwargs: Any) -> AsyncTask[_T]: ...
    def __call__(self, *args: Any, **kwargs: Any) -> _T: ...

class _MkAsyncDecorator:
    def __call__(self, fn: Callable[..., _T]) -> AsyncDecorator[_T]: ...

def asynq(*args: Any) -> _MkAsyncDecorator: ...
